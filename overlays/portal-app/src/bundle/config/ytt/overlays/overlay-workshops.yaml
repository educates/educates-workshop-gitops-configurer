#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")
#@ load("@ytt:assert", "assert")
#@ load("@ytt:regexp", "regexp")


#@ def upstream_workshop_list():
#@   names = []
#@   for file in data.list("/"):
#@     if regexp.match("workshop[^/]*\.yaml", file):
#@       file_defs = data.read(file)
#@       for doc in file_defs.split("\n---"):
#@         parsed_doc = doc.lstrip()
#@         if parsed_doc != "":
#@           workshop = struct.encode(yaml.decode(parsed_doc))
#@           name = workshop["metadata"]["name"]
#@           names.append(struct.encode({"name": name}))
#@         end
#@       end
#@     end
#@   end
#@   return names
#@ end

#@ def overlay_values(name):
#@   for portal in data.values.portals:
#@     if portal.name==name:
#@       for data_workshop in portal.workshops:
#!         TODO: Implement below check
#!         assert.one_of(upstream_workshop_list()).check(data_workshop.name)

#@ capacity = data_workshop.capacity
#@ initial = data_workshop.initial
#@ expires = data_workshop.expires
#@ orphaned = data_workshop.orphaned
#@ reserved = data_workshop.reserved
#@ overtime = data_workshop.overtime
#@ deadline = data_workshop.deadline
#@ overdue = data_workshop.overdue
#@ refresh = data_workshop.refresh

- name: #@ data_workshop.name
  #@ if/end capacity != -1:
  capacity: #@ capacity
  #@ if/end initial != -1:
  initial: #@ initial
  #@ if/end expires:
  expires: #@ expires
  #@ if/end orphaned:
  orphaned: #@ orphaned
  #@ if/end reserved != -1:
  reserved: #@ reserved
  #@ if/end overtime:
  overtime: #@ overtime
  #@ if/end deadline:
  deadline: #@ deadline
  #@ if/end overdue:
  overdue: #@ overdue
  #@ if/end refresh:
  refresh: #@ refresh
#@       end
#@     end
#@   end

#@ end

#@ def common_items(list1, list2):
#@     common_list = []
#@     for item1 in list1:
#@       if data.values.mode == "app_per_bundle":
#@         for item2 in list2:
#@             if item1["name"] == item2["name"]:
#@                 common_list.append(item1)
#@                 break
#@             end
#@         end
#@       elif data.values.mode == "one_app":
#@         common_list.append(item1)
#@       end
#@     end
#@     return common_list
#@ end

#@ for portal in data.values.portals:
#@overlay/match by=overlay.subset({"kind":"TrainingPortal", "metadata": {"name": portal.name }}),expects="0+"
#@overlay/match-child-defaults missing_ok=True
---
spec:
  workshops: #@ common_items(overlay.apply(overlay_values(portal.name)),upstream_workshop_list())
#@ end

